#!/bin/bash

# -----------------------------------------------------------------------------> FUNCTIONS
__diff(){
  diff -u ${BUILD_CACHE} <(otool -L $(cat ${BUILD_CACHE}) | __gsort)
}
__find(){
  -f(){
    find ${MACOS} \
      -name "${EXECUTABLE}" -o \
      -name "*.dylib" -o \
      -name "*.so"
  }
  -l(){
    find ${LIB} -name "*.dylib"
  }
  "$@"
}
__gsort(){
  grep -o "${MACPORTS_PREFIX}/lib/.*\.dylib" | sort -u
}
__xz(){
  echo "=> Creating distribution .tar.xz..."
  {
    [ -f ${DIST_DIR}/Applications ] && rm ${DIST_DIR}/Applications
    tar cf - ${DIST_DIR} | xz > ${RELEASE}/${DMG%.*}.tar.xz
  } && {
    echo "Created: ${RELEASE}/${DMG%.*}.tar.xz"
  }
}
# <----------------------------------------------------------------------------|
# -----------------------------------------------------------------------------> VARIABLES

declare -i BEEP=1       # 1 = Beep on
declare -i CREATE_XZ=1  # 1 = Create distribution tar.xz

APP=RawTherapee.app
CONTENTS=${APP}/Contents
RESOURCES=${CONTENTS}/Resources
MACOS=${CONTENTS}/MacOS
BIN=${MACOS}/bin
ETC=${MACOS}/etc
LIB=${MACOS}/lib
SHARE=${MACOS}/share
RELEASE=Release
EXECUTABLE=rawtherapee

RT_VERSION=($(hg parents --template '{latesttag} {latesttagdistance}'))
CFBundleShortVersionString=${RT_VERSION[0]:0:3}   # 4.x
CFBundleVersion=${RT_VERSION[0]}.${RT_VERSION[1]} # 4.x.x.xxx
DMG=rawtherapee_mac64_$(date +%F)_$(hg -R . branch)_${RT_VERSION[0]}i.${RT_VERSION[1]}-$(hg parents --template '{node|short}').dmg

MACPORTS_PREFIX="$(which port)"             # e.g.) /opt/local/bin/port
MACPORTS_PREFIX="${MACPORTS_PREFIX%/bin*}"  # e.g.) /opt/local
BUILD_CACHE=cache.$$                        # cache.PID

START_CACHE_TARGET="/tmp/RT4" # Rewrite path in the start file, when this path is changed.

# <----------------------------------------------------------------------------|
# -----------------------------------------------------------------------------> START UP

cd /usr/local/src/rawtherapee || exit

rm -rf ${RELEASE}
cp -R build/Release .
sed -i "" \
    -e "4s|ccache|gcc-mp-4|" \
    -e "9s|$| (Development)|" \
    ${RELEASE}/AboutThisBuild.txt


if [ ! -d ${RELEASE} ]; then
  echo "=> Please run this from the root of the project; i.e. './tools/osx/make-app-bundle'."
  exit
fi

if [ -d ${APP} ]; then
  echo "=> Removing old application..."
  rm -rf ${APP}
fi

echo "=> Removing any old disk images..."
rm ${RELEASE}/rawtherapee*.{dmg,dmg.zip,tar.xz}

# <----------------------------------------------------------------------------|
# ----------------------------------------------------------------------------->
{
mkdir -p  ${RESOURCES} \
          ${ETC} \
          ${LIB}
} && {
cp -R ${RELEASE}/* \
      ${MACOS}

cp -R ${MACPORTS_PREFIX}/lib/pango \
      ${MACPORTS_PREFIX}/lib/gtk-2.0 \
      ${MACPORTS_PREFIX}/lib/gdk-pixbuf* \
      ${LIB}

cp -R ${MACPORTS_PREFIX}/share/mime \
      ${SHARE}

cp -R ${MACPORTS_PREFIX}/etc/gtk-2.0 \
      ${MACPORTS_PREFIX}/etc/pango \
      ${MACPORTS_PREFIX}/etc/fonts \
      ${ETC}
# <----------------------------------------------------------------------------|
} && {
# -----------------------------------------------------------------------------> ADEPT ETC FILES
echo "=> Adepting etc files..."
perl -pi -e "s|^.*<cachedir>${MACPORTS_PREFIX}/var/cache/fontconfig</cachedir>.*$||" ${ETC}/fonts/fonts.conf
perl -pi -e "s|${MACPORTS_PREFIX}|\@executable_path|g" ${ETC}/gtk-2.0/gdk-pixbuf.loaders ${ETC}/gtk-2.0/gtk.immodules
perl -pi -e "s|${MACPORTS_PREFIX}|../..|g" ${ETC}/pango/pango.modules
rm  ${ETC}/pango/pangorc \
    ${LIB}/gdk-pixbuf-2.0/2.10.0/loaders.cache
# <----------------------------------------------------------------------------|
} && {
# -----------------------------------------------------------------------------> ADD STUFFS
echo "=> Add stuffs..."
cp tools/osx/Icons.icns ${RESOURCES}
cp tools/osx/start ${MACOS}
sed -e "s|3.0a|${CFBundleShortVersionString}|" \
    -e "s|3.0 Alpha|${CFBundleVersion}|" \
    ./tools/osx/Info.plist > ${CONTENTS}/Info.plist
# <----------------------------------------------------------------------------|
} && {
# -----------------------------------------------------------------------------> CHECK DEPENDENT LIBRARIES
echo "=> Finding object files and creating list..."
otool -L $(__find -f) | __gsort > ${BUILD_CACHE}
} && {
echo "=> Checking dependent libraries..."
until __diff
do
  echo "=> Updating dependent libraries list..."
  __diff | patch
done
} && {
echo "=> Copying libraries..."
cp -v $(cat ${BUILD_CACHE}) ${LIB}
# <----------------------------------------------------------------------------|
} && {
# -----------------------------------------------------------------------------> ADEPT OBJECT FILES TO ENVIRONMENT
echo "=> Adepting object files to environment..."
__find -f > ${BUILD_CACHE}

d=$(cat ${BUILD_CACHE} | wc -l | egrep -o "[0-9]+")
n=1
while read
do
  echo $'\n'[$((n++))/$d] ${REPLY}
  
  { # lipo and install_name_tool -id
    echo $'\t'lipo ${REPLY} -thin x86_64 -output ${REPLY}
    if [[ ${REPLY##*.} = dylib ]]; then
      echo $'\t'install_name_tool -id ${START_CACHE_TARGET}/${REPLY##*/} ${REPLY}
    fi
  } | bash -v
  
  { # install_name_tool -change
    otool -L ${REPLY} \
      | __gsort \
      | perl -pe "s|^(.*/)(.*)$|\tinstall_name_tool -change \1\2 ${START_CACHE_TARGET}/\2 ${REPLY}|g"
  } | bash -v
done < ${BUILD_CACHE}
unset d n
# <----------------------------------------------------------------------------|
} && {
# -----------------------------------------------------------------------------> CREATE DISTRIBUTION DIRECTORY
#
# DISTRIBUTION MAP
# ----------------
#
# /SOURCE_ROOT
# |
# +-- /RawTherapee
#     |
#     +-- Rawtherapee.app
#     |
#     +-- AboutThisBuild.txt
#     |
#     +-- README.txt
#     |
#     +-- Applications => /Applications
#

DIST_DIR="RawTherapee"
echo "=> Creating distribution directory..."
[ -d ${DIST_DIR} ] && rm -rf ${DIST_DIR}

  mkdir ${DIST_DIR} && {
    mv ${APP} ${DIST_DIR}                         # Rawtherapee.app
    cp ${RELEASE}/AboutThisBuild.txt ${DIST_DIR}  # AboutThisBuild.txt
    ln -s /Applications ${DIST_DIR}               # Symlink to applications dir
    
    # README.txt
    cat <<-'__EOF__' > ${DIST_DIR}/README.txt
		This distribution bundle is required X11.app or XQuartz.app. Please install if your system does not have them.
		(note: Mac OS 10.8 does not have them as standard.)
		
		http://xquartz.macosforge.org
	__EOF__
    
    # RawTherapee Blog.webloc
    cat <<-'__EOF__' > "${DIST_DIR}/RawTherapee Blog.webloc"
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
		<plist version="1.0">
		<dict>
		<key>URL</key>
		<string>http://www.rawtherapee.com/</string>
		</dict>
		</plist>
	__EOF__
  }

# <----------------------------------------------------------------------------|
} && {
# -----------------------------------------------------------------------------> CREATE DISTRIBUTION
echo "=> Creating distribution .dmg..."
hdiutil create -format UDBZ -srcdir ${DIST_DIR} ${RELEASE}/${DMG} # DMG
[[ ${CREATE_XZ} = 1 ]] && __xz                                    # TAR.XZ
# -----------------------------------------------------------------------------|
} && {
# -----------------------------------------------------------------------------> CLEANUP
echo "=> Cleaning up..."
rm -rf  ${DIST_DIR} \
        ${BUILD_CACHE}

echo "=> All done!"
[[ ${BEEP} = 1 ]] && echo -e "\a"
# <----------------------------------------------------------------------------|
}