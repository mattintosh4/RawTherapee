#!/bin/bash
#
# indent type: tab
# indent size: 4
#
# /!\ ATTENTION
# The code for x11 build does not tested yet. (2012-12-28)

RELEASE=Release
EXECUTABLE=rawtherapee

[ ! -d $RELEASE ] && {
	echo "/!\ Please run this from the root of the project; i.e. './tools/osx/make-app-bundle'."
	exit
}

checkProp(){
	### PATH OF GTK LIBRARY ###
	local f=`otool -L $1 | awk '/libgtk-.*dylib/ { print $1 }'`
	
	### GTK/MACPORTS PREFIX ###
	MACPORTS_PREFIX=${f%/lib/*}
	
	### CORRECT MACPORTS PREFIX ###
	#MACPORTS_PREFIX=`which port | sed "s|/bin/port||"`
	
	### BIT DEPTH ###
	case `lipo -info $1 | awk '{ print $NF }'` in
		x86_64) BIT_DEPTH=64;;
		i386  ) BIT_DEPTH=32;;
	esac
	
	### X11 BUILD FLAG ###
	if [[ $f =~ libgtk-x11 ]]; then
		X11_BUILD=1
	fi
}
checkProp $RELEASE/$EXECUTABLE

APP=RawTherapee.app
(( X11_BUILD == 1 )) && APP=RawTherapeeX.app
CONTENTS=$APP/Contents
RESOURCES=$CONTENTS/Resources
MACOS=$CONTENTS/MacOS
ETC=$MACOS/etc
LIB=$MACOS/lib
SHARE=$MACOS/share



### RAWTHERAPEE VERSION ###
RT_VERSION=`awk '/^Version: / { print $2 }' $RELEASE/AboutThisBuild.txt`
RT_VERSION=${RT_VERSION:=4.0.9}

### DMG NAME ###
DMG=rawtherapee_mac${BIT_DEPTH}_${RT_VERSION}.dmg
(( X11_BUILD == 1 )) && DMG=${DMG%.*}_x11.dmg

### DISTRIBUTION DIRECTORY NAME (DMG VOLUME NAME) ###
DIST_DIR=RawTherapee${RT_VERSION}

test -e $APP && rm -rf $_ && echo "=> Removed old application"
test -e $RELEASE/rawtherapee*.dmg && rm $_ && echo "=> Removed any old disk images"

echo "=> Creating application directory structure"
mkdir -p	$RESOURCES \
			$ETC \
			$LIB \
			$SHARE

echo "=> Copying libraries from $MACPORTS_PREFIX"
cp -R	$MACPORTS_PREFIX/lib/pango \
		$MACPORTS_PREFIX/lib/gtk-2.0 \
		$MACPORTS_PREFIX/lib/gdk-pixbuf* \
		$LIB

#Copy over mimes (if a mime is copied, and nobody hears, is it really copied?)
echo "=> Copying shared files from $MACPORTS_PREFIX"
cp -R	$MACPORTS_PREFIX/share/mime \
		$SHARE

#Copy over etc files, and modify as needed
echo "=> Copying configuration files from ${MACPORTS_PREFIX} and modifying for standalone app bundle"
cp -R $MACPORTS_PREFIX/etc/gtk-2.0 $ETC
cp -R $MACPORTS_PREFIX/etc/pango $ETC || mkdir $ETC/pango

$MACPORTS_PREFIX/bin/gtk-query-immodules-2.0 \
$MACPORTS_PREFIX/lib/gtk-2.0/*/immodules/*.so | sed "s|$MACPORTS_PREFIX|@executable_path|" > $ETC/gtk-2.0/gtk.immodules
$MACPORTS_PREFIX/bin/gdk-pixbuf-query-loaders | sed "s|$MACPORTS_PREFIX|@executable_path|" > $ETC/gtk-2.0/gdk-pixbuf.loaders
$MACPORTS_PREFIX/bin/pango-querymodules | sed "s|$MACPORTS_PREFIX|/tmp/$MACOS|" > $ETC/pango/pango.modules
printf '[Pango]\nModuleFiles = %s\n' /tmp/$ETC/pango/pango.modules > $ETC/pango/pangorc

# REMOVE UNUSED FILES
echo "=> Removing not used files"
rm -rf	$LIB/gdk-pixbuf-2.0/*/loaders.cache \
		$LIB/gtk-2.0/*/printbackends \
		$LIB/gtk-2.0/include \
		$LIB/gtk-2.0/modules
find $LIB -name "*.la" | xargs rm
find $LIB/gtk-2.0/*/engines/* ! -name "libclearlooks.so" | xargs rm

echo "=> Copying release files"
cp -R	$RELEASE/* \
		$MACOS

### ADD MAC OS BUILD VERSION TO AboutThisBuild.txt
echo "MacOS build version: `sw_vers -productVersion`" >> $MACOS/AboutThisBuild.txt


echo "=> Creating required application bundle files"

cp tools/osx/Icons.icns $RESOURCES

cat > $CONTENTS/Info.plist <<__EOF__
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>start</string>
	<key>CFBundleIconFile</key>
	<string>Icons.icns</string>
	<key>CFBundleIdentifier</key>
	<string>com.rawtherapee.rawtherapee</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>RawTherapee</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>${RT_VERSION:0:3}</string>
	<key>CFBundleSignature</key>
	<string>APPL</string>
	<key>CFBundleVersion</key>
	<string>${RT_VERSION}</string>
</dict>
</plist>
__EOF__



### CREATE LAUNCH SCRIPT ###
cat > $MACOS/start <<'__EOF__'
#!/bin/bash

APP="${0%/Contents/*}"
MACOS="${0%/*}"
LIB="$MACOS"/lib
ETC="$MACOS"/etc

export DYLD_LIBRARY_PATH="$LIB:$DYLD_LIBRARY_PATH"
export GDK_PIXBUF_MODULE_FILE="$ETC"/gtk-2.0/gdk-pixbuf.loaders
export GTK_DATA_DIRS="$MACOS"
export GTK_DATA_PREFIX="$MACOS"
export GTK_EXE_PREFIX="$MACOS"
export GTK_IM_MODULE_FILE="$ETC"/gtk-2.0/gtk.immodules
export GTK_PATH="$MACOS"
export PANGO_RC_FILE="$ETC"/pango/pangorc
export XDG_DATA_DIRS="$MACOS"/share

__EOF__

(( X11_BUILD == 1 )) && cat >> $MACOS/start <<'__EOF__'
EXTRA_DIR="/tmp/RT4"
test -d $EXTRA_DIR && rm -rf $EXTRA_DIR
mkdir $EXTRA_DIR
cp /usr/lib/libcups* $EXTRA_DIR

export DYLD_LIBRARY_PATH="$EXTRA_DIR:$DYLD_LIBRARY_PATH"
export FONTCONFIG_PATH="$ETC"/fonts

__EOF__

cat >> $MACOS/start <<'__EOF__'
ln -sf "$APP" /tmp
exec "$MACOS"/rawtherapee
__EOF__

chmod +x $MACOS/start





#Copy and relink the explicitly defined libraries
echo "=> Recursively copying libraries referenced by executable"
checkLink(){
	while read
	do
		if [ ! -f $LIB/${REPLY##*/} ]; then
			cp $REPLY $LIB
			checkLink $REPLY
		fi
	done < <(otool -L $1 | awk 'NR >= 2 && ! /(\/usr\/lib|\/System|@executable_path)\// { print $1 }')
}
checkLink $MACOS/$EXECUTABLE

# EXCLUDE 32-BIT BINARIES AND CONVERT TO RELATIVE PATHS
def_optimize(){
	echo "=> Excluding 32-bit binary"
	bash -v <(
		for f in "$@"
		do
			if [ `lipo -info $f | grep "i386"` ]; then
				printf 'lipo %s -thin x86_64 -output %s' $f $f
			fi
		done
	)

	echo "=> Converting to relative path"
	for f in "$@"
	do
		echo $f:
		bash -v <(
			# CONVERT DYNAMIC LIBARIES ID
			if [ "${f##*.}" = "dylib" ]; then
				printf "\tinstall_name_tool -id %s %s\n" @executable_path/lib/${f##*/} $f
			fi
			# CONVERT DEPENDENTS LIBRARIES PATHS
			while read
			do
				printf "\tinstall_name_tool -change %s %s %s\n" $REPLY @executable_path/lib/${REPLY##*/} $f
			done < <(otool -L $f | grep -v "`otool -D $f`" | awk '! /(\/usr\/lib|\/System|@executable_path)\// { print $1 }')
			echo
		)
	done
}
def_optimize `find $MACOS -type f -name "rawtherapee" -o -name "*.dylib" -o -name "*.so"`


### SET UP DISTRIBUTION DIRECTORY
echo "=> Creating and setup distribution directory"
test -d $DIST_DIR && rm -rf $_
mkdir $_

### FOR X11 BUILD --->
if (( X11_BUILD == 1 )); then
printf '[PangoX]\nAliasFiles = %s\n' /tmp/$ETC/pango/pangox.aliases >> $ETC/pango/pangorc
cp -RL $MACPORTS_PREFIX/etc/fonts $ETC
sed -i "" \
	-e "s|<dir>$MACPORTS_PREFIX/share/fonts</dir>||" \
	-e "s|<cachedir>$MACPORTS_PREFIX/var/cache/fontconfig</cachedir>||" \
	-e "s|\(<include ignore_missing=\"yes\">\)$MACPORTS_PREFIX\(/etc/fonts/conf.d</include>\)|\1/tmp/$MACOS\2|" \
	$ETC/fonts/fonts.conf
test -d $ETC/fonts/conf.avail && rm -rf $_

cat > $DIST_DIR/XQuartz.webloc <<'__EOF__'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>URL</key>
<string>http://xquartz.macosforge.org/landing/</string>
</dict>
</plist>
__EOF__

cat > $DIST_DIR/README.txt <<'__EOF__'
This distribution bundle is required X11.app or XQuartz.app. Please install if your system does not have them.
(note: Mac OS 10.8 does not have them as standard.)

http://xquartz.macosforge.org/landing/
__EOF__
fi
### <--- FOR X11 BUILD

cp $MACOS/AboutThisBuild.txt $DIST_DIR
mv $APP $DIST_DIR
ln -s /Applications $DIST_DIR
cat > $DIST_DIR/"RawTherapee Blog".webloc <<-'__EOF__'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>URL</key>
<string>http://rawtherapee.com/</string>
</dict>
</plist>
__EOF__

echo "=> Creating distribution dmg"
hdiutil create -format UDBZ -srcdir $DIST_DIR $RELEASE/$DMG





rm -rf $DIST_DIR

echo "All done!"
